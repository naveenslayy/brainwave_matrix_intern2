import tkinter as tk
from tkinter import messagebox
import sqlite3

# Database setup
conn = sqlite3.connect('inventory.db')
cursor = conn.cursor()

# Create users table
cursor.execute('''CREATE TABLE IF NOT EXISTS users (
                    id INTEGER PRIMARY KEY,
                    username TEXT NOT NULL,
                    password TEXT NOT NULL)''')

# Insert a default user (username: admin, password: admin)
cursor.execute('INSERT INTO users (username, password) VALUES (?, ?)', ('admin', 'admin'))
conn.commit()

# Close the connection
conn.close()

# Authentication function
def authenticate(username, password):
    conn = sqlite3.connect('inventory.db')
    cursor = conn.cursor()
    cursor.execute('SELECT * FROM users WHERE username = ? AND password = ?', (username, password))
    user = cursor.fetchone()
    conn.close()
    return user


class LoginWindow(tk.Tk):
    def __init__(self):
        super().__init__()
        self.title("Login")
        self.geometry("300x150")

        self.label_username = tk.Label(self, text="Username")
        self.label_username.pack(pady=5)
        self.entry_username = tk.Entry(self)
        self.entry_username.pack(pady=5)

        self.label_password = tk.Label(self, text="Password")
        self.label_password.pack(pady=5)
        self.entry_password = tk.Entry(self, show="*")
        self.entry_password.pack(pady=5)

        self.login_button = tk.Button(self, text="Login", command=self.login)
        self.login_button.pack(pady=5)

    def login(self):
        username = self.entry_username.get()
        password = self.entry_password.get()
        user = authenticate(username, password)
        if user:
            self.destroy()
            InventoryApp()
        else:
            messagebox.showerror("Error", "Invalid username or password")


class InventoryApp(tk.Tk):
    def __init__(self):
        super().__init__()
        self.title("Inventory Management")
        self.geometry("600x400")

        self.create_widgets()

    def create_widgets(self):
        # Labels and Entry Widgets for product details
        self.label_name = tk.Label(self, text="Product Name")
        self.label_name.grid(row=0, column=0, padx=10, pady=10)
        self.entry_name = tk.Entry(self)
        self.entry_name.grid(row=0, column=1, padx=10, pady=10)

        self.label_quantity = tk.Label(self, text="Quantity")
        self.label_quantity.grid(row=1, column=0, padx=10, pady=10)
        self.entry_quantity = tk.Entry(self)
        self.entry_quantity.grid(row=1, column=1, padx=10, pady=10)

        self.label_price = tk.Label(self, text="Price")
        self.label_price.grid(row=2, column=0, padx=10, pady=10)
        self.entry_price = tk.Entry(self)
        self.entry_price.grid(row=2, column=1, padx=10, pady=10)

        # Buttons for Add, Edit, Delete operations
        self.add_button = tk.Button(self, text="Add Product", command=self.add_product)
        self.add_button.grid(row=3, column=0, padx=10, pady=10)
        self.edit_button = tk.Button(self, text="Edit Product", command=self.edit_product)
        self.edit_button.grid(row=3, column=1, padx=10, pady=10)
        self.delete_button = tk.Button(self, text="Delete Product", command=self.delete_product)
        self.delete_button.grid(row=3, column=2, padx=10, pady=10)

        # Listbox and Scrollbar for displaying products
        self.product_listbox = tk.Listbox(self)
        self.product_listbox.grid(row=4, column=0, columnspan=3, padx=10, pady=10, sticky="nsew")
        self.scrollbar = tk.Scrollbar(self, orient=tk.VERTICAL, command=self.product_listbox.yview)
        self.scrollbar.grid(row=4, column=3, sticky="ns")
        self.product_listbox.config(yscrollcommand=self.scrollbar.set)

        # Load the products
        self.load_products()

    def load_products(self):
        # Load products from the database and display in the listbox
        conn = sqlite3.connect('inventory.db')
        cursor = conn.cursor()
        cursor.execute("SELECT * FROM products")
        products = cursor.fetchall()
        conn.close()
        self.product_listbox.delete(0, tk.END)
        for product in products:
            self.product_listbox.insert(tk.END, f"{product[0]} - {product[1]} - {product[2]} - {product[3]}")

    def add_product(self):
        # Validate and add a new product to the database
        name = self.entry_name.get()
        quantity = self.entry_quantity.get()
        price = self.entry_price.get()
        if not name or not quantity.isdigit() or not price.isdigit():
            messagebox.showerror("Error", "Please enter valid product details.")
            return

        conn = sqlite3.connect('inventory.db')
        cursor = conn.cursor()
        cursor.execute("INSERT INTO products (name, quantity, price) VALUES (?, ?, ?)", (name, int(quantity), float(price)))
        conn.commit()
        conn.close()
        self.load_products()
        self.entry_name.delete(0, tk.END)
        self.entry_quantity.delete(0, tk.END)
        self.entry_price.delete(0, tk.END)

    def edit_product(self):
        # Edit an existing product in the database
        try:
            selected_product = self.product_listbox.get(self.product_listbox.curselection())
            product_id = int(selected_product.split(" - ")[0])
            name = self.entry_name.get()
            quantity = self.entry_quantity.get()
            price = self.entry_price.get()
            if not name or not quantity.isdigit() or not price.isdigit():
                messagebox.showerror("Error", "Please enter valid product details.")
                return

            conn = sqlite3.connect('inventory.db')
            cursor = conn.cursor()
            cursor.execute("UPDATE products SET name = ?, quantity = ?, price = ? WHERE id = ?", (name, int(quantity), float(price), product_id))
            conn.commit()
            conn.close()
            self.load_products()
            self.entry_name.delete(0, tk.END)
            self.entry_quantity.delete(0, tk.END)
            self.entry_price.delete(0, tk.END)
        except tk.TclError:
            messagebox.showerror("Error", "Please select a product to edit.")

    def delete_product(self):
        # Delete a product from the database
        try:
            selected_product = self.product_listbox.get(self.product_listbox.curselection())
            product_id = int(selected_product.split(" - ")[0])
            conn = sqlite3.connect('inventory.db')
            cursor = conn.cursor()
            cursor.execute("DELETE FROM products WHERE id = ?", (product_id,))
            conn.commit()
            conn.close()
            self.load_products()
        except tk.TclError:
            messagebox.showerror("Error", "Please select a product to delete.")


# Database setup for products
conn = sqlite3.connect('inventory.db')
cursor = conn.cursor()

# Create products table
cursor.execute('''CREATE TABLE IF NOT EXISTS products (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    name TEXT NOT NULL,
                    quantity INTEGER NOT NULL,
                    price REAL NOT NULL)''')

conn.commit()
conn.close()

def generate_low_stock_alert():
    conn = sqlite3.connect('inventory.db')
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM products WHERE quantity < ?", (5,))
    low_stock_products = cursor.fetchall()
    conn.close()
    if low_stock_products:
        alert_message = "Low Stock Alert!\n

